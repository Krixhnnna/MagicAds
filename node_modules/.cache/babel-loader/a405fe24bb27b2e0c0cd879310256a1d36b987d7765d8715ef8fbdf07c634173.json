{"ast":null,"code":"import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\nlet ID = 0;\nexport class Mesh extends Transform {\n  constructor(gl, {\n    geometry,\n    program,\n    mode = gl.TRIANGLES,\n    frustumCulled = true,\n    renderOrder = 0\n  } = {}) {\n    super();\n    if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n    this.gl = gl;\n    this.id = ID++;\n    this.geometry = geometry;\n    this.program = program;\n    this.mode = mode;\n\n    // Used to skip frustum culling\n    this.frustumCulled = frustumCulled;\n\n    // Override sorting to force an order\n    this.renderOrder = renderOrder;\n    this.modelViewMatrix = new Mat4();\n    this.normalMatrix = new Mat3();\n    this.beforeRenderCallbacks = [];\n    this.afterRenderCallbacks = [];\n  }\n  onBeforeRender(f) {\n    this.beforeRenderCallbacks.push(f);\n    return this;\n  }\n  onAfterRender(f) {\n    this.afterRenderCallbacks.push(f);\n    return this;\n  }\n  draw({\n    camera\n  } = {}) {\n    this.beforeRenderCallbacks.forEach(f => f && f({\n      mesh: this,\n      camera\n    }));\n    if (camera) {\n      // Add empty matrix uniforms to program if unset\n      if (!this.program.uniforms.modelMatrix) {\n        Object.assign(this.program.uniforms, {\n          modelMatrix: {\n            value: null\n          },\n          viewMatrix: {\n            value: null\n          },\n          modelViewMatrix: {\n            value: null\n          },\n          normalMatrix: {\n            value: null\n          },\n          projectionMatrix: {\n            value: null\n          },\n          cameraPosition: {\n            value: null\n          }\n        });\n      }\n\n      // Set the matrix uniforms\n      this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n      this.program.uniforms.cameraPosition.value = camera.worldPosition;\n      this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n      this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n      this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n      this.program.uniforms.modelMatrix.value = this.worldMatrix;\n      this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n      this.program.uniforms.normalMatrix.value = this.normalMatrix;\n    }\n\n    // determine if faces need to be flipped - when mesh scaled negatively\n    let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n    this.program.use({\n      flipFaces\n    });\n    this.geometry.draw({\n      mode: this.mode,\n      program: this.program\n    });\n    this.afterRenderCallbacks.forEach(f => f && f({\n      mesh: this,\n      camera\n    }));\n  }\n}","map":{"version":3,"names":["Transform","Mat3","Mat4","ID","Mesh","constructor","gl","geometry","program","mode","TRIANGLES","frustumCulled","renderOrder","canvas","console","error","id","modelViewMatrix","normalMatrix","beforeRenderCallbacks","afterRenderCallbacks","onBeforeRender","f","push","onAfterRender","draw","camera","forEach","mesh","uniforms","modelMatrix","Object","assign","value","viewMatrix","projectionMatrix","cameraPosition","worldPosition","multiply","worldMatrix","getNormalMatrix","flipFaces","cullFace","determinant","use"],"sources":["/Users/krishnapandey/Desktop/Img gen/magicads/node_modules/ogl/src/core/Mesh.js"],"sourcesContent":["import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
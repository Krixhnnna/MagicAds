{"ast":null,"code":"// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\nexport class Program {\n  constructor(gl, {\n    vertex,\n    fragment,\n    uniforms = {},\n    transparent = false,\n    cullFace = gl.BACK,\n    frontFace = gl.CCW,\n    depthTest = true,\n    depthWrite = true,\n    depthFunc = gl.LESS\n  } = {}) {\n    if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n    this.gl = gl;\n    this.uniforms = uniforms;\n    this.id = ID++;\n    if (!vertex) console.warn('vertex shader not supplied');\n    if (!fragment) console.warn('fragment shader not supplied');\n\n    // Store program state\n    this.transparent = transparent;\n    this.cullFace = cullFace;\n    this.frontFace = frontFace;\n    this.depthTest = depthTest;\n    this.depthWrite = depthWrite;\n    this.depthFunc = depthFunc;\n    this.blendFunc = {};\n    this.blendEquation = {};\n\n    // set default blendFunc if transparent flagged\n    if (this.transparent && !this.blendFunc.src) {\n      if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n    }\n\n    // compile vertex shader and log errors\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, vertex);\n    gl.compileShader(vertexShader);\n    if (gl.getShaderInfoLog(vertexShader) !== '') {\n      console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n    }\n\n    // compile fragment shader and log errors\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, fragment);\n    gl.compileShader(fragmentShader);\n    if (gl.getShaderInfoLog(fragmentShader) !== '') {\n      console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n    }\n\n    // compile program and log errors\n    this.program = gl.createProgram();\n    gl.attachShader(this.program, vertexShader);\n    gl.attachShader(this.program, fragmentShader);\n    gl.linkProgram(this.program);\n    if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n      return console.warn(gl.getProgramInfoLog(this.program));\n    }\n\n    // Remove shader once linked\n    gl.deleteShader(vertexShader);\n    gl.deleteShader(fragmentShader);\n\n    // Get active uniform locations\n    this.uniformLocations = new Map();\n    let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n    for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n      let uniform = gl.getActiveUniform(this.program, uIndex);\n      this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n      // split uniforms' names to separate array and struct declarations\n      const split = uniform.name.match(/(\\w+)/g);\n      uniform.uniformName = split[0];\n      if (split.length === 3) {\n        uniform.isStructArray = true;\n        uniform.structIndex = Number(split[1]);\n        uniform.structProperty = split[2];\n      } else if (split.length === 2 && isNaN(Number(split[1]))) {\n        uniform.isStruct = true;\n        uniform.structProperty = split[1];\n      }\n    }\n\n    // Get active attribute locations\n    this.attributeLocations = new Map();\n    const locations = [];\n    const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n    for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n      const attribute = gl.getActiveAttrib(this.program, aIndex);\n      const location = gl.getAttribLocation(this.program, attribute.name);\n      locations[location] = attribute.name;\n      this.attributeLocations.set(attribute, location);\n    }\n    this.attributeOrder = locations.join('');\n  }\n  setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n    this.blendFunc.src = src;\n    this.blendFunc.dst = dst;\n    this.blendFunc.srcAlpha = srcAlpha;\n    this.blendFunc.dstAlpha = dstAlpha;\n    if (src) this.transparent = true;\n  }\n  setBlendEquation(modeRGB, modeAlpha) {\n    this.blendEquation.modeRGB = modeRGB;\n    this.blendEquation.modeAlpha = modeAlpha;\n  }\n  applyState() {\n    if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n    if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);else this.gl.renderer.disable(this.gl.CULL_FACE);\n    if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);else this.gl.renderer.disable(this.gl.BLEND);\n    if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n    this.gl.renderer.setFrontFace(this.frontFace);\n    this.gl.renderer.setDepthMask(this.depthWrite);\n    this.gl.renderer.setDepthFunc(this.depthFunc);\n    if (this.blendFunc.src) this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n    if (this.blendEquation.modeRGB) this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n  }\n  use({\n    flipFaces = false\n  } = {}) {\n    let textureUnit = -1;\n    const programActive = this.gl.renderer.currentProgram === this.id;\n\n    // Avoid gl call if program already in use\n    if (!programActive) {\n      this.gl.useProgram(this.program);\n      this.gl.renderer.currentProgram = this.id;\n    }\n\n    // Set only the active uniforms found in the shader\n    this.uniformLocations.forEach((location, activeUniform) => {\n      let name = activeUniform.uniformName;\n\n      // get supplied uniform\n      let uniform = this.uniforms[name];\n\n      // For structs, get the specific property instead of the entire object\n      if (activeUniform.isStruct) {\n        uniform = uniform[activeUniform.structProperty];\n        name += `.${activeUniform.structProperty}`;\n      }\n      if (activeUniform.isStructArray) {\n        uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n        name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n      }\n      if (!uniform) {\n        return warn(`Active uniform ${name} has not been supplied`);\n      }\n      if (uniform && uniform.value === undefined) {\n        return warn(`${name} uniform is missing a value parameter`);\n      }\n      if (uniform.value.texture) {\n        textureUnit = textureUnit + 1;\n\n        // Check if texture needs to be updated\n        uniform.value.update(textureUnit);\n        return setUniform(this.gl, activeUniform.type, location, textureUnit);\n      }\n\n      // For texture arrays, set uniform as an array of texture units instead of just one\n      if (uniform.value.length && uniform.value[0].texture) {\n        const textureUnits = [];\n        uniform.value.forEach(value => {\n          textureUnit = textureUnit + 1;\n          value.update(textureUnit);\n          textureUnits.push(textureUnit);\n        });\n        return setUniform(this.gl, activeUniform.type, location, textureUnits);\n      }\n      setUniform(this.gl, activeUniform.type, location, uniform.value);\n    });\n    this.applyState();\n    if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n  }\n  remove() {\n    this.gl.deleteProgram(this.program);\n  }\n}\nfunction setUniform(gl, type, location, value) {\n  value = value.length ? flatten(value) : value;\n  const setValue = gl.renderer.state.uniformLocations.get(location);\n\n  // Avoid redundant uniform commands\n  if (value.length) {\n    if (setValue === undefined || setValue.length !== value.length) {\n      // clone array to store as cache\n      gl.renderer.state.uniformLocations.set(location, value.slice(0));\n    } else {\n      if (arraysEqual(setValue, value)) return;\n\n      // Update cached array values\n      setValue.set ? setValue.set(value) : setArray(setValue, value);\n      gl.renderer.state.uniformLocations.set(location, setValue);\n    }\n  } else {\n    if (setValue === value) return;\n    gl.renderer.state.uniformLocations.set(location, value);\n  }\n  switch (type) {\n    case 5126:\n      return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value);\n    // FLOAT\n    case 35664:\n      return gl.uniform2fv(location, value);\n    // FLOAT_VEC2\n    case 35665:\n      return gl.uniform3fv(location, value);\n    // FLOAT_VEC3\n    case 35666:\n      return gl.uniform4fv(location, value);\n    // FLOAT_VEC4\n    case 35670: // BOOL\n    case 5124: // INT\n    case 35678: // SAMPLER_2D\n    case 35680:\n      return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value);\n    // SAMPLER_CUBE\n    case 35671: // BOOL_VEC2\n    case 35667:\n      return gl.uniform2iv(location, value);\n    // INT_VEC2\n    case 35672: // BOOL_VEC3\n    case 35668:\n      return gl.uniform3iv(location, value);\n    // INT_VEC3\n    case 35673: // BOOL_VEC4\n    case 35669:\n      return gl.uniform4iv(location, value);\n    // INT_VEC4\n    case 35674:\n      return gl.uniformMatrix2fv(location, false, value);\n    // FLOAT_MAT2\n    case 35675:\n      return gl.uniformMatrix3fv(location, false, value);\n    // FLOAT_MAT3\n    case 35676:\n      return gl.uniformMatrix4fv(location, false, value);\n    // FLOAT_MAT4\n  }\n}\nfunction addLineNumbers(string) {\n  let lines = string.split('\\n');\n  for (let i = 0; i < lines.length; i++) {\n    lines[i] = i + 1 + ': ' + lines[i];\n  }\n  return lines.join('\\n');\n}\nfunction flatten(a) {\n  const arrayLen = a.length;\n  const valueLen = a[0].length;\n  if (valueLen === undefined) return a;\n  const length = arrayLen * valueLen;\n  let value = arrayCacheF32[length];\n  if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n  for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n  return value;\n}\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) return false;\n  for (let i = 0, l = a.length; i < l; i++) {\n    if (a[i] !== b[i]) return false;\n  }\n  return true;\n}\nfunction setArray(a, b) {\n  for (let i = 0, l = a.length; i < l; i++) {\n    a[i] = b[i];\n  }\n}\nlet warnCount = 0;\nfunction warn(message) {\n  if (warnCount > 100) return;\n  console.warn(message);\n  warnCount++;\n  if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}","map":{"version":3,"names":["ID","arrayCacheF32","Program","constructor","gl","vertex","fragment","uniforms","transparent","cullFace","BACK","frontFace","CCW","depthTest","depthWrite","depthFunc","LESS","canvas","console","error","id","warn","blendFunc","blendEquation","src","renderer","premultipliedAlpha","setBlendFunc","ONE","ONE_MINUS_SRC_ALPHA","SRC_ALPHA","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderInfoLog","addLineNumbers","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteShader","uniformLocations","Map","numUniforms","ACTIVE_UNIFORMS","uIndex","uniform","getActiveUniform","set","getUniformLocation","name","split","match","uniformName","length","isStructArray","structIndex","Number","structProperty","isNaN","isStruct","attributeLocations","locations","numAttribs","ACTIVE_ATTRIBUTES","aIndex","attribute","getActiveAttrib","location","getAttribLocation","attributeOrder","join","dst","srcAlpha","dstAlpha","setBlendEquation","modeRGB","modeAlpha","applyState","enable","DEPTH_TEST","disable","CULL_FACE","BLEND","setCullFace","setFrontFace","setDepthMask","setDepthFunc","use","flipFaces","textureUnit","programActive","currentProgram","useProgram","forEach","activeUniform","value","undefined","texture","update","setUniform","type","textureUnits","push","CW","remove","deleteProgram","flatten","setValue","state","get","slice","arraysEqual","setArray","uniform1fv","uniform1f","uniform2fv","uniform3fv","uniform4fv","uniform1iv","uniform1i","uniform2iv","uniform3iv","uniform4iv","uniformMatrix2fv","uniformMatrix3fv","uniformMatrix4fv","string","lines","i","a","arrayLen","valueLen","Float32Array","b","l","warnCount","message"],"sources":["/Users/krishnapandey/Desktop/Img gen/magicads/node_modules/ogl/src/core/Program.js"],"sourcesContent":["// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        if (this.blendEquation.modeRGB) this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}